# Ultra-optimized multi-stage build for minimal Redmica image
FROM ruby:3.2-alpine AS builder

# Install build dependencies
RUN apk add --no-cache \
        build-base \
        postgresql-dev \
        nodejs \
        npm \
        git \
        yaml-dev \
        libffi-dev \
        openssl-dev \
        imagemagick-dev && \
    npm install -g yarn

WORKDIR /redmica

# Copy and install gems
COPY Gemfile* ./
RUN bundle config set --local without 'development test' && \
    bundle install --jobs 4 --retry 3 && \
    bundle clean --force && \
    rm -rf /usr/local/bundle/cache/*.gem && \
    find /usr/local/bundle/gems/ -name "*.c" -delete && \
    find /usr/local/bundle/gems/ -name "*.o" -delete

# Copy application code
COPY . .

# Production stage
FROM ruby:3.2-alpine AS production

# Install only runtime dependencies
RUN apk add --no-cache \
        postgresql-client \
        imagemagick \
        curl \
        yaml \
        libffi \
        openssl \
        tzdata && \
    rm -rf /var/cache/apk/*

WORKDIR /redmica

# Copy gems from builder stage
COPY --from=builder /usr/local/bundle /usr/local/bundle

# Copy application from builder stage
COPY --from=builder /redmica /redmica

# Set environment variables
ENV RAILS_ENV=production \
    RAILS_SERVE_STATIC_FILES=true

# Create entrypoint script
RUN echo '#!/bin/sh\n\
set -e\n\
echo "Precompiling assets..."\n\
RAILS_ENV=production SECRET_KEY_BASE=${SECRET_KEY_BASE:-$(bundle exec rails secret)} bundle exec rake assets:precompile\n\
echo "Starting Redmica..."\n\
exec bundle exec rails server -b 0.0.0.0' > /usr/local/bin/docker-entrypoint.sh && \
    chmod +x /usr/local/bin/docker-entrypoint.sh

# Create non-root user and set ownership
RUN adduser -D -u 1000 redmica && \
    chown -R redmica:redmica /redmica
USER redmica

# Expose default Redmica port
EXPOSE 3000

# Entrypoint for production
CMD ["/usr/local/bin/docker-entrypoint.sh"]
